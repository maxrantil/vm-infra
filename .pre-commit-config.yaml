# ABOUTME: Pre-commit hooks for vm-infra project
# ABOUTME: Infrastructure and Terraform validation with security checks and AI attribution blocking
# Install: pre-commit install && pre-commit install --hook-type commit-msg
# Run manually: pre-commit run --all-files
# Docs: https://pre-commit.com/

repos:
  # =============================================================================
  # GENERAL FILE QUALITY & SECURITY CHECKS
  # =============================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      # Security
      - id: detect-private-key
        name: Detect private keys
        description: Prevent committing SSH keys, API keys, certificates
        exclude: tests/test_precommit_secrets.sh

      - id: check-added-large-files
        name: Check for large files
        description: Prevent committing large binary files
        args: ['--maxkb=1000']

      # File quality
      - id: trailing-whitespace
        name: Trim trailing whitespace
        description: Remove trailing whitespace from all files

      - id: end-of-file-fixer
        name: Fix end of files
        description: Ensure files end with newline

      - id: mixed-line-ending
        name: Fix mixed line endings
        description: Normalize line endings to LF
        args: ['--fix=lf']

      # Syntax validation
      - id: check-yaml
        name: Check YAML syntax
        description: Validate YAML files are parseable

      - id: check-json
        name: Check JSON syntax
        description: Validate JSON files are parseable

      # Conflict detection
      - id: check-merge-conflict
        name: Check for merge conflicts
        description: Detect merge conflict markers

      - id: check-case-conflict
        name: Check for case conflicts
        description: Detect files with names that differ only in case

      # Shell/Script checks
      - id: check-executables-have-shebangs
        name: Check shebangs on executables
        description: Ensure executable files have proper shebangs

      - id: check-shebang-scripts-are-executable
        name: Check scripts are executable
        description: Ensure scripts with shebangs are executable

  # =============================================================================
  # SHELL SCRIPT LINTING (if repo has shell scripts)
  # =============================================================================
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        name: ShellCheck bash scripts
        description: Lint bash scripts for common issues
        args: ['--severity=warning']
        types: [shell]

  # =============================================================================
  # MARKDOWN LINTING (for documentation)
  # =============================================================================
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.42.0
    hooks:
      - id: markdownlint
        name: Markdown linting
        description: Lint markdown files for style and consistency
        args: ['--disable', 'MD013', '--disable', 'MD041']

  # =============================================================================
  # LOCAL CUSTOM HOOKS (AI BLOCKING, COMMIT FORMAT, SECURITY)
  # =============================================================================
  - repo: local
    hooks:
      # -------------------------------------------------------------------------
      # AI/AGENT ATTRIBUTION BLOCKING (CLAUDE.md Policy Enforcement)
      # -------------------------------------------------------------------------
      - id: no-ai-attribution
        name: Block AI/Agent Attribution in Files
        description: Enforce CLAUDE.md policy with bypass prevention (leetspeak, spacing)
        entry: bash
        language: system
        stages: [pre-commit]
        pass_filenames: false
        args:
          - -c
          - |
            # Exclude common documentation and config files
            EXCLUDES=":(exclude).pre-commit-config.yaml :(exclude)docs/ :(exclude)SESSION*.md :(exclude)*HANDOFF*.md :(exclude)test-*.sh :(exclude)test-*.txt :(exclude)test-*.log"

            # Get staged changes
            DIFF=$(git diff --cached --diff-filter=ACMR -- $EXCLUDES | grep "^+")

            if [ -z "$DIFF" ]; then
                exit 0
            fi

            # Check with Python for advanced pattern matching with normalization
            python3 <<'PYEOF'
            import sys, re, subprocess

            # Get git diff output
            result = subprocess.run(
                ['git', 'diff', '--cached', '--diff-filter=ACMR', '--',
                 ':(exclude).pre-commit-config.yaml', ':(exclude)docs/',
                 ':(exclude)SESSION*.md', ':(exclude)*HANDOFF*.md',
                 ':(exclude)test-*.sh', ':(exclude)test-*.txt', ':(exclude)test-*.log'],
                capture_output=True, text=True
            )
            diff_lines = [line for line in result.stdout.split('\n') if line.startswith('+')]

            # Normalize text to catch bypasses (leetspeak, spacing)
            def normalize(text):
                text = text.lower()
                # Replace leetspeak numbers with letters first
                replacements = {'1': 'l', '3': 'e', '4': 'a', '0': 'o', '5': 's', '7': 't'}
                for num, letter in replacements.items():
                    text = text.replace(num, letter)
                # Then remove spaces, hyphens, underscores
                return re.sub(r'[\s_-]', '', text)

            # Check each added line
            for line in diff_lines:
                normalized = normalize(line)

                # Check for AI tool names in normalized form
                ai_tools = ['claude', 'gpt', 'chatgpt', 'copilot', 'gemini', 'bard']
                for tool in ai_tools:
                    if tool in normalized:
                        # Check if it's in attribution context
                        attribution_verbs = ['coauthoredby', 'generatedwith', 'generatedby', 'reviewedby',
                                            'validatedby', 'approvedby', 'checkedby', 'implementedby',
                                            'createdby', 'writtenby', 'helpedby', 'assistedby']
                        if any(verb in normalized for verb in attribution_verbs):
                            print('')
                            print('❌ ERROR: AI/agent attribution detected in staged changes')
                            print('')
                            print('Policy: Remove AI tool attributions from commits (per CLAUDE.md)')
                            print('  ❌ Co-authored-by: Claude/GPT/AI')
                            print('  ❌ Generated with [AI tool]')
                            print('  ❌ Agent validation mentions')
                            print('  ❌ Bypasses via leetspeak (C1aude) or spacing (C l a u d e)')
                            print('')
                            print('✅ Document agent validations in:')
                            print('  • Session handoff files (SESSION_HANDOFF.md)')
                            print('  • Implementation documentation (docs/)')
                            print('  • PRD/PDR documents')
                            print('')
                            sys.exit(1)

                # Check explicit patterns
                if re.search(r'claude\.com/claude-code', line, re.IGNORECASE):
                    print('')
                    print('❌ ERROR: AI/agent attribution detected in staged changes')
                    print('')
                    print('Policy: Remove AI tool attributions from commits (per CLAUDE.md)')
                    print('')
                    sys.exit(1)

                # Check agent mentions
                if re.search(r'(reviewed by|validated by|approved by|checked by).*(agent|architecture-designer|security-validator|performance-optimizer|test-automation-qa|code-quality-analyzer)', line, re.IGNORECASE):
                    print('')
                    print('❌ ERROR: AI/agent attribution detected in staged changes')
                    print('')
                    print('Policy: Remove AI tool attributions from commits (per CLAUDE.md)')
                    print('')
                    sys.exit(1)

                # Check generic AI attribution
                if re.search(r'\b(with|by|using|via|from|thanks to)\s+(AI|artificial intelligence|chatbot)\b', line, re.IGNORECASE):
                    print('')
                    print('❌ ERROR: AI/agent attribution detected in staged changes')
                    print('')
                    print('Policy: Remove AI tool attributions from commits (per CLAUDE.md)')
                    print('  ❌ Generic AI attribution (AI assistance, chatbot help, etc.)')
                    print('')
                    sys.exit(1)

      # -------------------------------------------------------------------------
      # AI/AGENT ATTRIBUTION BLOCKING IN COMMIT MESSAGES
      # -------------------------------------------------------------------------
      - id: no-ai-attribution-commit-msg
        name: Block AI Attribution in Commit Messages
        description: Prevent AI attribution with normalization (catches leetspeak, spacing)
        entry: python3
        language: system
        stages: [commit-msg]
        args:
          - -c
          - |
            import sys, re, unicodedata

            if len(sys.argv) < 2:
                print("ERROR: No commit message file provided")
                sys.exit(1)

            with open(sys.argv[1]) as f:
                msg = f.read()

            # Normalize text: Unicode, zero-width chars, leetspeak, spaces
            # Catches: C1aude -> claude, C‌l‌a‌u‌d‌e -> claude (zero-width), Clаude -> claude (Cyrillic)
            def normalize(text):
                # Normalize Unicode to prevent homoglyph attacks (Cyrillic a vs Latin a)
                text = unicodedata.normalize('NFKD', text)
                text = text.encode('ascii', 'ignore').decode('ascii')

                # Remove zero-width characters (invisible separators)
                zero_width_chars = '\u200b\u200c\u200d\ufeff'
                for char in zero_width_chars:
                    text = text.replace(char, '')

                text = text.lower()
                # Replace leetspeak numbers with letters
                replacements = {'1': 'l', '3': 'e', '4': 'a', '0': 'o', '5': 's', '7': 't'}
                for num, letter in replacements.items():
                    text = text.replace(num, letter)
                # Remove spaces, hyphens, underscores
                return re.sub(r'[\s_-]', '', text)

            # Alternate normalization for Gemini detection (1→i instead of 1→l)
            # Catches: G3m1n1 -> gemini (where '1' represents 'i')
            def normalize_with_i(text):
                # Normalize Unicode to prevent homoglyph attacks
                text = unicodedata.normalize('NFKD', text)
                text = text.encode('ascii', 'ignore').decode('ascii')

                # Remove zero-width characters
                zero_width_chars = '\u200b\u200c\u200d\ufeff'
                for char in zero_width_chars:
                    text = text.replace(char, '')

                text = text.lower()
                # Replace leetspeak with 1→i for Gemini detection
                replacements = {'1': 'i', '3': 'e', '4': 'a', '0': 'o', '5': 's', '7': 't'}
                for num, letter in replacements.items():
                    text = text.replace(num, letter)
                # Remove spaces, hyphens, underscores
                return re.sub(r'[\s_-]', '', text)

            normalized_msg = normalize(msg)
            normalized_msg_alt = normalize_with_i(msg)

            # Check normalized text for AI tool names (catches leetspeak/spacing)
            # Block ANY mention of AI tools, regardless of context (they're trying to sneak attribution)
            ai_tools = ['claude', 'gpt', 'chatgpt', 'copilot', 'gemini', 'bard']
            for tool in ai_tools:
                if tool in normalized_msg or tool in normalized_msg_alt:
                    print('')
                    print('❌ ERROR: AI/agent attribution detected in commit message')
                    print('')
                    print('Policy: Remove AI tool names from commits (per CLAUDE.md)')
                    print(f'  ❌ Detected: {tool} (after normalization)')
                    print('  ❌ Co-authored-by: Claude/GPT/AI')
                    print('  ❌ Generated with [AI tool]')
                    print('  ❌ Bypasses via leetspeak (C1aude, G3m1n1) or spacing (C l a u d e)')
                    print('  ❌ Any mention of AI tool names')
                    print('')
                    print('✅ Document agent validations in:')
                    print('  • Session handoff files (SESSION_HANDOFF.md)')
                    print('  • Implementation documentation (docs/)')
                    print('  • PRD/PDR documents')
                    print('')
                    sys.exit(1)

            # Check for explicit patterns that don't need normalization
            explicit_patterns = [
                r'claude\.com/claude-code',
                r'(?:reviewed by|validated by|approved by|checked by).*(?:agent|architecture-designer|security-validator|performance-optimizer|test-automation-qa|code-quality-analyzer|documentation-knowledge-manager|ux-accessibility-i18n-agent|devops-deployment-agent|general-purpose-agent)',
                r'agent (?:review|validation|approval|check)',
                r'🤖.*(?:Claude|AI|GPT)',
            ]

            for pattern in explicit_patterns:
                if re.search(pattern, msg, re.IGNORECASE):
                    print('')
                    print('❌ ERROR: AI/agent attribution detected in commit message')
                    print('')
                    print('Policy: Remove AI tool attributions from commits (per CLAUDE.md)')
                    print('  ❌ Co-authored-by: Claude/GPT/AI')
                    print('  ❌ Generated with [AI tool]')
                    print('  ❌ Agent validation mentions')
                    print('  ❌ 🤖 emoji with AI references')
                    print('')
                    print('✅ Document agent validations in:')
                    print('  • Session handoff files (SESSION_HANDOFF.md)')
                    print('  • Implementation documentation (docs/)')
                    print('  • PRD/PDR documents')
                    print('')
                    sys.exit(1)

            # Check for generic AI attribution patterns
            generic_patterns = [
                r'\b(with|by|using|via|from|thanks to|helped by|assisted by)\s+(AI|artificial intelligence|chatbot|chat bot|language model|LLM)\b',
                r'\bAI\s+(assistance|help|support|tool)\b',
                r'\b(AI\s+)?assistant\s+(help|assistance)',
            ]

            for pattern in generic_patterns:
                if re.search(pattern, msg, re.IGNORECASE):
                    print('')
                    print('❌ ERROR: AI/agent attribution detected in commit message')
                    print('')
                    print('Policy: Remove AI tool attributions from commits (per CLAUDE.md)')
                    print('  ❌ Generic AI attribution (AI assistance, AI help, chatbot, etc.)')
                    print('  ❌ Attribution phrases like "with AI", "by AI", "thanks to AI"')
                    print('')
                    print('✅ Document agent validations in:')
                    print('  • Session handoff files (SESSION_HANDOFF.md)')
                    print('  • Implementation documentation (docs/)')
                    print('  • PRD/PDR documents')
                    print('')
                    sys.exit(1)

      # -------------------------------------------------------------------------
      # CONVENTIONAL COMMIT FORMAT VALIDATION
      # -------------------------------------------------------------------------
      - id: conventional-commit-msg
        name: Enforce Conventional Commit Format
        description: Validate commit messages follow conventional commit format
        entry: python3
        language: system
        stages: [commit-msg]
        args:
          - -c
          - |
            import sys, re

            if len(sys.argv) < 2:
                print("ERROR: No commit message file provided")
                sys.exit(1)

            with open(sys.argv[1]) as f:
                msg = f.read().strip()

            pattern = r'^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?!?: .+'

            if not re.match(pattern, msg):
                print('❌ ERROR: Commit message must use conventional commit format')
                print('')
                print('Format: <type>[optional scope]: <description>')
                print('')
                print('Examples:')
                print('  feat(workflows): add Python test workflow')
                print('  fix(templates): correct property file syntax')
                print('  docs: update workflow documentation')
                print('  refactor(workflows): simplify input parameters')
                print('')
                print('Types: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert')
                print('')
                print('Breaking changes: Add ! after type/scope (e.g., feat!: remove old workflow)')
                sys.exit(1)

      # -------------------------------------------------------------------------
      # CREDENTIALS/SECRETS DETECTION
      # -------------------------------------------------------------------------
      - id: check-credentials
        name: Check for credentials in files
        description: Detect potential passwords, tokens, API keys
        entry: bash
        language: system
        pass_filenames: false
        args:
          - -c
          - |
            if grep -r --include="*.sh" --include="*.bash" --include="*.py" --include="*.js" --include="*.ts" --include="*.txt" --include="*.yml" --include="*.yaml" --exclude=".pre-commit-config.yaml" -iE "(password|api_key|secret|token|github_token).*=.*['\"\`]\S+" --exclude-dir=tests --exclude-dir=node_modules --exclude-dir=.git .; then
              echo "⚠️  WARNING: Potential credentials found!"
              echo "Review carefully before committing"
              exit 1
            fi

  # =============================================================================
  # ADVANCED SECRET DETECTION (detect-secrets)
  # =============================================================================
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        name: Detect secrets (advanced)
        description: Catch AWS/GCP/Azure credentials, API keys, tokens, passwords
        args:
          - --baseline
          - .secrets.baseline
        exclude: (package-lock.json|tests/test_precommit_secrets.sh)

  # =============================================================================
  # TERRAFORM/INFRASTRUCTURE
  # =============================================================================
  - repo: https://github.com/antonbabenko/pre-commit-terraform
    rev: v1.96.0
    hooks:
      - id: terraform_fmt
        name: Terraform format
        description: Format Terraform files consistently

      - id: terraform_validate
        name: Terraform validate
        description: Validate Terraform configuration
        args:
          - --hook-config=--path=terraform/
